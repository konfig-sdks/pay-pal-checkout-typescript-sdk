/* tslint:disable */
/* eslint-disable */
/*
Orders

An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

The version of the OpenAPI document: 2.13


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Error500 } from '../models';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { Patch } from '../models';
// @ts-ignore
import { TrackersUpdateTrackingInfo403Response } from '../models';
// @ts-ignore
import { TrackersUpdateTrackingInfo404Response } from '../models';
// @ts-ignore
import { TrackersUpdateTrackingInfo422Response } from '../models';
// @ts-ignore
import { TrackersUpdateTrackingInfoResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * TrackersApi - axios parameter creator
 * @export
 */
export const TrackersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
         * @summary Update or cancel tracking information for a PayPal order
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {string} trackerId The order tracking ID.
         * @param {Array<Patch>} [patch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrackingInfo: async (id: string, trackerId: string, patch?: Array<Patch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateTrackingInfo', 'id', id)
            // verify required parameter 'trackerId' is not null or undefined
            assertParamExists('updateTrackingInfo', 'trackerId', trackerId)
            const localVarPath = `/v2/checkout/orders/{id}/trackers/{tracker_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)))
                .replace(`{${"tracker_id"}}`, encodeURIComponent(String(trackerId !== undefined ? trackerId : `-tracker_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}/trackers/{tracker_id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TrackersApi - functional programming interface
 * @export
 */
export const TrackersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TrackersApiAxiosParamCreator(configuration)
    return {
        /**
         * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
         * @summary Update or cancel tracking information for a PayPal order
         * @param {TrackersApiUpdateTrackingInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateTrackingInfo(requestParameters: TrackersApiUpdateTrackingInfoRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const patch: Array<Patch> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateTrackingInfo(requestParameters.id, requestParameters.trackerId, patch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TrackersApi - factory interface
 * @export
 */
export const TrackersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TrackersApiFp(configuration)
    return {
        /**
         * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
         * @summary Update or cancel tracking information for a PayPal order
         * @param {TrackersApiUpdateTrackingInfoRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTrackingInfo(requestParameters: TrackersApiUpdateTrackingInfoRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateTrackingInfo(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for updateTrackingInfo operation in TrackersApi.
 * @export
 * @interface TrackersApiUpdateTrackingInfoRequest
 */
export type TrackersApiUpdateTrackingInfoRequest = {
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof TrackersApiUpdateTrackingInfo
    */
    readonly id: string
    /**
    * The order tracking ID.
    * @type {string}
    * @memberof TrackersApiUpdateTrackingInfo
    */
    readonly trackerId: string
    /**
    * 
    * @type {Array<Patch>}
    * @memberof TrackersApiUpdateTrackingInfo
    */
    readonly requestBody?: Array<Patch>
}

/**
 * TrackersApiGenerated - object-oriented interface
 * @export
 * @class TrackersApiGenerated
 * @extends {BaseAPI}
 */
export class TrackersApiGenerated extends BaseAPI {
    /**
     * Updates or cancels the tracking information for a PayPal order, by ID. Updatable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody></tr><tr><td><code>items</code></td><td>replace</td><td>Using replace op for <code>items</code> will replace the entire <code>items</code> object with the value sent in request.</td></tr><tr><td><code>notify_payer</code></td><td>replace, add</td><td></td></tr><tr><td><code>status</code></td><td>replace</td><td>Only patching status to CANCELLED is currently supported.</td></tr></tbody></table>
     * @summary Update or cancel tracking information for a PayPal order
     * @param {TrackersApiUpdateTrackingInfoRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TrackersApiGenerated
     */
    public updateTrackingInfo(requestParameters: TrackersApiUpdateTrackingInfoRequest, options?: AxiosRequestConfig) {
        return TrackersApiFp(this.configuration).updateTrackingInfo(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
