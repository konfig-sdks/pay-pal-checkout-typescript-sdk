/* tslint:disable */
/* eslint-disable */
/*
Orders

An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

The version of the OpenAPI document: 2.13


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CheckoutPaymentIntent } from '../models';
// @ts-ignore
import { ConfirmOrderRequest } from '../models';
// @ts-ignore
import { Error500 } from '../models';
// @ts-ignore
import { ErrorDefault } from '../models';
// @ts-ignore
import { Order } from '../models';
// @ts-ignore
import { OrderApplicationContext } from '../models';
// @ts-ignore
import { OrderAuthorizeRequest } from '../models';
// @ts-ignore
import { OrderAuthorizeResponse } from '../models';
// @ts-ignore
import { OrderCaptureRequest } from '../models';
// @ts-ignore
import { OrderConfirmApplicationContext } from '../models';
// @ts-ignore
import { OrderRequest } from '../models';
// @ts-ignore
import { OrderTrackerRequest } from '../models';
// @ts-ignore
import { OrdersAddTrackingInformation403Response } from '../models';
// @ts-ignore
import { OrdersAddTrackingInformation404Response } from '../models';
// @ts-ignore
import { OrdersAddTrackingInformation422Response } from '../models';
// @ts-ignore
import { OrdersAddTrackingInformationResponse } from '../models';
// @ts-ignore
import { OrdersAuthorizePaymentOrder401Response } from '../models';
// @ts-ignore
import { OrdersAuthorizePaymentOrder403Response } from '../models';
// @ts-ignore
import { OrdersAuthorizePaymentOrder404Response } from '../models';
// @ts-ignore
import { OrdersAuthorizePaymentOrder422Response } from '../models';
// @ts-ignore
import { OrdersAuthorizePaymentOrderResponse } from '../models';
// @ts-ignore
import { OrdersCapturePayment401Response } from '../models';
// @ts-ignore
import { OrdersCapturePayment403Response } from '../models';
// @ts-ignore
import { OrdersCapturePayment404Response } from '../models';
// @ts-ignore
import { OrdersCapturePayment422Response } from '../models';
// @ts-ignore
import { OrdersCapturePaymentResponse } from '../models';
// @ts-ignore
import { OrdersConfirmPaymentSource403Response } from '../models';
// @ts-ignore
import { OrdersConfirmPaymentSource422Response } from '../models';
// @ts-ignore
import { OrdersConfirmPaymentSourceResponse } from '../models';
// @ts-ignore
import { OrdersCreateOrder401Response } from '../models';
// @ts-ignore
import { OrdersCreateOrder422Response } from '../models';
// @ts-ignore
import { OrdersCreateOrderResponse } from '../models';
// @ts-ignore
import { OrdersShowDetails404Response } from '../models';
// @ts-ignore
import { OrdersShowDetailsResponse } from '../models';
// @ts-ignore
import { OrdersUpdateOrderStatus401Response } from '../models';
// @ts-ignore
import { OrdersUpdateOrderStatus404Response } from '../models';
// @ts-ignore
import { OrdersUpdateOrderStatus422Response } from '../models';
// @ts-ignore
import { OrdersUpdateOrderStatusResponse } from '../models';
// @ts-ignore
import { Patch } from '../models';
// @ts-ignore
import { Payer } from '../models';
// @ts-ignore
import { PaymentSource } from '../models';
// @ts-ignore
import { ProcessingInstruction } from '../models';
// @ts-ignore
import { PurchaseUnitRequest } from '../models';
// @ts-ignore
import { ShipmentCarrier } from '../models';
// @ts-ignore
import { ShipmentTrackingNumberType } from '../models';
// @ts-ignore
import { ShipmentTrackingStatus } from '../models';
// @ts-ignore
import { TrackerItem } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adds tracking information for an Order.
         * @summary Add tracking information for an Order.
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {OrderTrackerRequest} orderTrackerRequest 
         * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTrackingInformation: async (id: string, orderTrackerRequest: OrderTrackerRequest, payPalAuthAssertion?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('addTrackingInformation', 'id', id)
            // verify required parameter 'orderTrackerRequest' is not null or undefined
            assertParamExists('addTrackingInformation', 'orderTrackerRequest', orderTrackerRequest)
            const localVarPath = `/v2/checkout/orders/{id}/track`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment"], configuration)
            if (payPalAuthAssertion != null) {
                localVarHeaderParameter['PayPal-Auth-Assertion'] = String(payPalAuthAssertion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderTrackerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}/track',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderTrackerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
         * @summary Authorize payment for order
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {string} [payPalClientMetadataId] 
         * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
         * @param {OrderAuthorizeRequest} [orderAuthorizeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizePaymentOrder: async (id: string, payPalRequestId?: string, prefer?: string, payPalClientMetadataId?: string, payPalAuthAssertion?: string, orderAuthorizeRequest?: OrderAuthorizeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('authorizePaymentOrder', 'id', id)
            const localVarPath = `/v2/checkout/orders/{id}/authorize`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment", "https://uri.paypal.com/services/payments/orders/client-side-integration"], configuration)
            if (payPalRequestId != null) {
                localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }

            if (payPalClientMetadataId != null) {
                localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(payPalClientMetadataId);
            }

            if (payPalAuthAssertion != null) {
                localVarHeaderParameter['PayPal-Auth-Assertion'] = String(payPalAuthAssertion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderAuthorizeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}/authorize',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderAuthorizeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
         * @summary Capture payment for order
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {string} [payPalClientMetadataId] 
         * @param {string} [payPalAuthAssertion] An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see &lt;a href&#x3D;\&quot;/api/rest/requests/#paypal-auth-assertion\&quot;&gt;PayPal-Auth-Assertion&lt;/a&gt;.
         * @param {OrderCaptureRequest} [orderCaptureRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment: async (id: string, payPalRequestId?: string, prefer?: string, payPalClientMetadataId?: string, payPalAuthAssertion?: string, orderCaptureRequest?: OrderCaptureRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('capturePayment', 'id', id)
            const localVarPath = `/v2/checkout/orders/{id}/capture`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment", "https://uri.paypal.com/services/payments/orders/client-side-integration"], configuration)
            if (payPalRequestId != null) {
                localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }

            if (payPalClientMetadataId != null) {
                localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(payPalClientMetadataId);
            }

            if (payPalAuthAssertion != null) {
                localVarHeaderParameter['PayPal-Auth-Assertion'] = String(payPalAuthAssertion);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderCaptureRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}/capture',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderCaptureRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Payer confirms their intent to pay for the the Order with the given payment source.
         * @summary Confirm the Order
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {string} [payPalClientMetadataId] 
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {ConfirmOrderRequest} [confirmOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPaymentSource: async (id: string, payPalClientMetadataId?: string, prefer?: string, confirmOrderRequest?: ConfirmOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('confirmPaymentSource', 'id', id)
            const localVarPath = `/v2/checkout/orders/{id}/confirm-payment-source`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment", "https://uri.paypal.com/services/payments/initiatepayment"], configuration)
            if (payPalClientMetadataId != null) {
                localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(payPalClientMetadataId);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: confirmOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}/confirm-payment-source',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(confirmOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
         * @summary Create order
         * @param {OrderRequest} orderRequest 
         * @param {string} [payPalRequestId] The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
         * @param {string} [payPalPartnerAttributionId] 
         * @param {string} [payPalClientMetadataId] 
         * @param {string} [prefer] The preferred server response upon successful completion of the request. Value is:&lt;ul&gt;&lt;li&gt;&lt;code&gt;return&#x3D;minimal&lt;/code&gt;. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the &lt;code&gt;id&lt;/code&gt;, &lt;code&gt;status&lt;/code&gt; and HATEOAS links.&lt;/li&gt;&lt;li&gt;&lt;code&gt;return&#x3D;representation&lt;/code&gt;. The server returns a complete resource representation, including the current state of the resource.&lt;/li&gt;&lt;/ul&gt;
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (orderRequest: OrderRequest, payPalRequestId?: string, payPalPartnerAttributionId?: string, payPalClientMetadataId?: string, prefer?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderRequest' is not null or undefined
            assertParamExists('createOrder', 'orderRequest', orderRequest)
            const localVarPath = `/v2/checkout/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment", "https://uri.paypal.com/services/payments/orders/client-side-integration"], configuration)
            if (payPalRequestId != null) {
                localVarHeaderParameter['PayPal-Request-Id'] = String(payPalRequestId);
            }

            if (payPalPartnerAttributionId != null) {
                localVarHeaderParameter['PayPal-Partner-Attribution-Id'] = String(payPalPartnerAttributionId);
            }

            if (payPalClientMetadataId != null) {
                localVarHeaderParameter['PayPal-Client-Metadata-Id'] = String(payPalClientMetadataId);
            }

            if (prefer != null) {
                localVarHeaderParameter['Prefer'] = String(prefer);
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: orderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(orderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
         * @summary Show order details
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {string} [fields] A comma-separated list of fields that should be returned for the order. Valid filter field is &#x60;payment_source&#x60;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails: async (id: string, fields?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('showDetails', 'id', id)
            const localVarPath = `/v2/checkout/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment", "https://uri.paypal.com/services/payments/orders/client-side-integration"], configuration)
            if (fields !== undefined) {
                localVarQueryParameter['fields'] = fields;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
         * @summary Update order
         * @param {string} id The ID of the order that the tracking information is associated with.
         * @param {Array<Patch>} [patch] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus: async (id: string, patch?: Array<Patch>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateOrderStatus', 'id', id)
            const localVarPath = `/v2/checkout/orders/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id !== undefined ? id : `-id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2 required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "Oauth2", ["https://uri.paypal.com/services/payments/payment", "https://uri.paypal.com/services/payments/orders/client-side-integration"], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: patch,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/v2/checkout/orders/{id}',
                httpMethod: 'PATCH'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(patch, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * Adds tracking information for an Order.
         * @summary Add tracking information for an Order.
         * @param {OrdersApiAddTrackingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addTrackingInformation(requestParameters: OrdersApiAddTrackingInformationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const orderTrackerRequest: OrderTrackerRequest = {
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addTrackingInformation(requestParameters.id, orderTrackerRequest, requestParameters.payPalAuthAssertion, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
         * @summary Authorize payment for order
         * @param {OrdersApiAuthorizePaymentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authorizePaymentOrder(requestParameters: OrdersApiAuthorizePaymentOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderAuthorizeResponse>> {
            const orderAuthorizeRequest: OrderAuthorizeRequest = {
                payment_source: requestParameters.payment_source
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.authorizePaymentOrder(requestParameters.id, requestParameters.payPalRequestId, requestParameters.prefer, requestParameters.payPalClientMetadataId, requestParameters.payPalAuthAssertion, orderAuthorizeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
         * @summary Capture payment for order
         * @param {OrdersApiCapturePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async capturePayment(requestParameters: OrdersApiCapturePaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const orderCaptureRequest: OrderCaptureRequest = {
                payment_source: requestParameters.payment_source
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.capturePayment(requestParameters.id, requestParameters.payPalRequestId, requestParameters.prefer, requestParameters.payPalClientMetadataId, requestParameters.payPalAuthAssertion, orderCaptureRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Payer confirms their intent to pay for the the Order with the given payment source.
         * @summary Confirm the Order
         * @param {OrdersApiConfirmPaymentSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async confirmPaymentSource(requestParameters: OrdersApiConfirmPaymentSourceRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const confirmOrderRequest: ConfirmOrderRequest = {
                payment_source: requestParameters.payment_source,
                processing_instruction: requestParameters.processing_instruction,
                application_context: requestParameters.application_context
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.confirmPaymentSource(requestParameters.id, requestParameters.payPalClientMetadataId, requestParameters.prefer, confirmOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
         * @summary Create order
         * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const orderRequest: OrderRequest = {
                intent: requestParameters.intent,
                payer: requestParameters.payer,
                purchase_units: requestParameters.purchase_units,
                payment_source: requestParameters.payment_source,
                application_context: requestParameters.application_context
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(orderRequest, requestParameters.payPalRequestId, requestParameters.payPalPartnerAttributionId, requestParameters.payPalClientMetadataId, requestParameters.prefer, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
         * @summary Show order details
         * @param {OrdersApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showDetails(requestParameters: OrdersApiShowDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showDetails(requestParameters.id, requestParameters.fields, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
         * @summary Update order
         * @param {OrdersApiUpdateOrderStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateOrderStatus(requestParameters: OrdersApiUpdateOrderStatusRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const patch: Array<Patch> = requestParameters.requestBody;
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateOrderStatus(requestParameters.id, patch, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * Adds tracking information for an Order.
         * @summary Add tracking information for an Order.
         * @param {OrdersApiAddTrackingInformationRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addTrackingInformation(requestParameters: OrdersApiAddTrackingInformationRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.addTrackingInformation(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
         * @summary Authorize payment for order
         * @param {OrdersApiAuthorizePaymentOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authorizePaymentOrder(requestParameters: OrdersApiAuthorizePaymentOrderRequest, options?: AxiosRequestConfig): AxiosPromise<OrderAuthorizeResponse> {
            return localVarFp.authorizePaymentOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
         * @summary Capture payment for order
         * @param {OrdersApiCapturePaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        capturePayment(requestParameters: OrdersApiCapturePaymentRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.capturePayment(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Payer confirms their intent to pay for the the Order with the given payment source.
         * @summary Confirm the Order
         * @param {OrdersApiConfirmPaymentSourceRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        confirmPaymentSource(requestParameters: OrdersApiConfirmPaymentSourceRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.confirmPaymentSource(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
         * @summary Create order
         * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.createOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
         * @summary Show order details
         * @param {OrdersApiShowDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showDetails(requestParameters: OrdersApiShowDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.showDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
         * @summary Update order
         * @param {OrdersApiUpdateOrderStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateOrderStatus(requestParameters: OrdersApiUpdateOrderStatusRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.updateOrderStatus(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addTrackingInformation operation in OrdersApi.
 * @export
 * @interface OrdersApiAddTrackingInformationRequest
 */
export type OrdersApiAddTrackingInformationRequest = {
    
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof OrdersApiAddTrackingInformation
    */
    readonly id: string
    
    /**
    * An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see <a href=\"/api/rest/requests/#paypal-auth-assertion\">PayPal-Auth-Assertion</a>.
    * @type {string}
    * @memberof OrdersApiAddTrackingInformation
    */
    readonly payPalAuthAssertion?: string
    
} & OrderTrackerRequest

/**
 * Request parameters for authorizePaymentOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiAuthorizePaymentOrderRequest
 */
export type OrdersApiAuthorizePaymentOrderRequest = {
    
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof OrdersApiAuthorizePaymentOrder
    */
    readonly id: string
    
    /**
    * The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
    * @type {string}
    * @memberof OrdersApiAuthorizePaymentOrder
    */
    readonly payPalRequestId?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof OrdersApiAuthorizePaymentOrder
    */
    readonly prefer?: string
    
    /**
    * 
    * @type {string}
    * @memberof OrdersApiAuthorizePaymentOrder
    */
    readonly payPalClientMetadataId?: string
    
    /**
    * An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see <a href=\"/api/rest/requests/#paypal-auth-assertion\">PayPal-Auth-Assertion</a>.
    * @type {string}
    * @memberof OrdersApiAuthorizePaymentOrder
    */
    readonly payPalAuthAssertion?: string
    
} & OrderAuthorizeRequest

/**
 * Request parameters for capturePayment operation in OrdersApi.
 * @export
 * @interface OrdersApiCapturePaymentRequest
 */
export type OrdersApiCapturePaymentRequest = {
    
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof OrdersApiCapturePayment
    */
    readonly id: string
    
    /**
    * The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
    * @type {string}
    * @memberof OrdersApiCapturePayment
    */
    readonly payPalRequestId?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof OrdersApiCapturePayment
    */
    readonly prefer?: string
    
    /**
    * 
    * @type {string}
    * @memberof OrdersApiCapturePayment
    */
    readonly payPalClientMetadataId?: string
    
    /**
    * An API-caller-provided JSON Web Token (JWT) assertion that identifies the merchant. For details, see <a href=\"/api/rest/requests/#paypal-auth-assertion\">PayPal-Auth-Assertion</a>.
    * @type {string}
    * @memberof OrdersApiCapturePayment
    */
    readonly payPalAuthAssertion?: string
    
} & OrderCaptureRequest

/**
 * Request parameters for confirmPaymentSource operation in OrdersApi.
 * @export
 * @interface OrdersApiConfirmPaymentSourceRequest
 */
export type OrdersApiConfirmPaymentSourceRequest = {
    
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof OrdersApiConfirmPaymentSource
    */
    readonly id: string
    
    /**
    * 
    * @type {string}
    * @memberof OrdersApiConfirmPaymentSource
    */
    readonly payPalClientMetadataId?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof OrdersApiConfirmPaymentSource
    */
    readonly prefer?: string
    
} & ConfirmOrderRequest

/**
 * Request parameters for createOrder operation in OrdersApi.
 * @export
 * @interface OrdersApiCreateOrderRequest
 */
export type OrdersApiCreateOrderRequest = {
    
    /**
    * The server stores keys for 6 hours. The API callers can request the times to up to 72 hours by speaking to their Account Manager.
    * @type {string}
    * @memberof OrdersApiCreateOrder
    */
    readonly payPalRequestId?: string
    
    /**
    * 
    * @type {string}
    * @memberof OrdersApiCreateOrder
    */
    readonly payPalPartnerAttributionId?: string
    
    /**
    * 
    * @type {string}
    * @memberof OrdersApiCreateOrder
    */
    readonly payPalClientMetadataId?: string
    
    /**
    * The preferred server response upon successful completion of the request. Value is:<ul><li><code>return=minimal</code>. The server returns a minimal response to optimize communication between the API caller and the server. A minimal response includes the <code>id</code>, <code>status</code> and HATEOAS links.</li><li><code>return=representation</code>. The server returns a complete resource representation, including the current state of the resource.</li></ul>
    * @type {string}
    * @memberof OrdersApiCreateOrder
    */
    readonly prefer?: string
    
} & OrderRequest

/**
 * Request parameters for showDetails operation in OrdersApi.
 * @export
 * @interface OrdersApiShowDetailsRequest
 */
export type OrdersApiShowDetailsRequest = {
    
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof OrdersApiShowDetails
    */
    readonly id: string
    
    /**
    * A comma-separated list of fields that should be returned for the order. Valid filter field is `payment_source`.
    * @type {string}
    * @memberof OrdersApiShowDetails
    */
    readonly fields?: string
    
}

/**
 * Request parameters for updateOrderStatus operation in OrdersApi.
 * @export
 * @interface OrdersApiUpdateOrderStatusRequest
 */
export type OrdersApiUpdateOrderStatusRequest = {
    /**
    * The ID of the order that the tracking information is associated with.
    * @type {string}
    * @memberof OrdersApiUpdateOrderStatus
    */
    readonly id: string
    /**
    * 
    * @type {Array<Patch>}
    * @memberof OrdersApiUpdateOrderStatus
    */
    readonly requestBody?: Array<Patch>
}

/**
 * OrdersApiGenerated - object-oriented interface
 * @export
 * @class OrdersApiGenerated
 * @extends {BaseAPI}
 */
export class OrdersApiGenerated extends BaseAPI {
    /**
     * Adds tracking information for an Order.
     * @summary Add tracking information for an Order.
     * @param {OrdersApiAddTrackingInformationRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public addTrackingInformation(requestParameters: OrdersApiAddTrackingInformationRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).addTrackingInformation(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Authorizes payment for an order. To successfully authorize payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#authorize-order\">Orders v2 errors</a>.</blockquote>
     * @summary Authorize payment for order
     * @param {OrdersApiAuthorizePaymentOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public authorizePaymentOrder(requestParameters: OrdersApiAuthorizePaymentOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).authorizePaymentOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Captures payment for an order. To successfully capture payment for an order, the buyer must first approve the order or a valid payment_source must be provided in the request. A buyer can approve the order upon being redirected to the rel:approve URL that was returned in the HATEOAS links in the create order response.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#capture-order\">Orders v2 errors</a>.</blockquote>
     * @summary Capture payment for order
     * @param {OrdersApiCapturePaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public capturePayment(requestParameters: OrdersApiCapturePaymentRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).capturePayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Payer confirms their intent to pay for the the Order with the given payment source.
     * @summary Confirm the Order
     * @param {OrdersApiConfirmPaymentSourceRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public confirmPaymentSource(requestParameters: OrdersApiConfirmPaymentSourceRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).confirmPaymentSource(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Creates an order. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#create-order\">Orders v2 errors</a>.</blockquote>
     * @summary Create order
     * @param {OrdersApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public createOrder(requestParameters: OrdersApiCreateOrderRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).createOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Shows details for an order, by ID.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\"/api/rest/reference/orders/v2/errors/#get-order\">Orders v2 errors</a>.</blockquote>
     * @summary Show order details
     * @param {OrdersApiShowDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public showDetails(requestParameters: OrdersApiShowDetailsRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).showDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates an order with a `CREATED` or `APPROVED` status. You cannot update an order with the `COMPLETED` status.<br/><br/>To make an update, you must provide a `reference_id`. If you omit this value with an order that contains only one purchase unit, PayPal sets the value to `default` which enables you to use the path: <code>\\\"/purchase_units/@reference_id==\'default\'/{attribute-or-object}\\\"</code>. Merchants and partners can add Level 2 and 3 data to payments to reduce risk and payment processing costs. For more information about processing payments, see <a href=\"https://developer.paypal.com/docs/checkout/advanced/processing/\">checkout</a> or <a href=\"https://developer.paypal.com/docs/multiparty/checkout/advanced/processing/\">multiparty checkout</a>.<blockquote><strong>Note:</strong> For error handling and troubleshooting, see <a href=\\\"/api/rest/reference/orders/v2/errors/#patch-order\\\">Orders v2 errors</a>.</blockquote>Patchable attributes or objects:<br/><br/><table><thead><th>Attribute</th><th>Op</th><th>Notes</th></thead><tbody><tr><td><code>intent</code></td><td>replace</td><td></td></tr><tr><td><code>payer</code></td><td>replace, add</td><td>Using replace op for <code>payer</code> will replace the whole <code>payer</code> object with the value sent in request.</td></tr><tr><td><code>purchase_units</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].custom_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].description</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payee.email</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].shipping.name</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.address</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].shipping.type</code></td><td>replace, add</td><td></td></tr><tr><td><code>purchase_units[].soft_descriptor</code></td><td>replace, remove</td><td></td></tr><tr><td><code>purchase_units[].amount</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].items</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].invoice_id</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction</code></td><td>replace</td><td></td></tr><tr><td><code>purchase_units[].payment_instruction.disbursement_mode</code></td><td>replace</td><td>By default, <code>disbursement_mode</code> is <code>INSTANT</code>.</td></tr><tr><td><code>purchase_units[].payment_instruction.platform_fees</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.airline</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>purchase_units[].supplementary_data.card</code></td><td>replace, add, remove</td><td></td></tr><tr><td><code>application_context.client_configuration</code></td><td>replace, add</td><td></td></tr></tbody></table>
     * @summary Update order
     * @param {OrdersApiUpdateOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApiGenerated
     */
    public updateOrderStatus(requestParameters: OrdersApiUpdateOrderStatusRequest, options?: AxiosRequestConfig) {
        return OrdersApiFp(this.configuration).updateOrderStatus(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
