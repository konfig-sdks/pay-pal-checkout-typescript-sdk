/*
Orders

An order represents a payment between two or more parties. Use the Orders API to create, update, retrieve, authorize, and capture orders.

The version of the OpenAPI document: 2.13


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/
import type * as buffer from "buffer"

import { AmountWithBreakdown } from './amount-with-breakdown';
import { Item } from './item';
import { Payee } from './payee';
import { PaymentInstruction } from './payment-instruction';
import { ShippingDetail } from './shipping-detail';
import { SupplementaryData } from './supplementary-data';

/**
 * The purchase unit request. Includes required information for the payment contract.
 * @export
 * @interface PurchaseUnitRequest
 */
export interface PurchaseUnitRequest {
    /**
     * The purchase description. The maximum length of the character is dependent on the type of characters used. The character length is specified assuming a US ASCII character. Depending on type of character; (e.g. accented character, Japanese characters) the number of characters that that can be specified as input might not equal the permissible max length.
     * @type {string}
     * @memberof PurchaseUnitRequest
     */
    'description'?: string;
    /**
     * The API caller-provided external ID for the purchase unit. Required for multiple purchase units when you must update the order through `PATCH`. If you omit this value and the order contains only one purchase unit, PayPal sets this value to `default`.
     * @type {string}
     * @memberof PurchaseUnitRequest
     */
    'reference_id'?: string;
    /**
     * 
     * @type {AmountWithBreakdown}
     * @memberof PurchaseUnitRequest
     */
    'amount': AmountWithBreakdown;
    /**
     * 
     * @type {Payee}
     * @memberof PurchaseUnitRequest
     */
    'payee'?: Payee;
    /**
     * 
     * @type {PaymentInstruction}
     * @memberof PurchaseUnitRequest
     */
    'payment_instruction'?: PaymentInstruction;
    /**
     * The API caller-provided external ID. Used to reconcile client transactions with PayPal transactions. Appears in transaction and settlement reports but is not visible to the payer.
     * @type {string}
     * @memberof PurchaseUnitRequest
     */
    'custom_id'?: string;
    /**
     * The API caller-provided external invoice number for this order. Appears in both the payer\'s transaction history and the emails that the payer receives.
     * @type {string}
     * @memberof PurchaseUnitRequest
     */
    'invoice_id'?: string;
    /**
     * The soft descriptor is the dynamic text used to construct the statement descriptor that appears on a payer\'s card statement.<br><br>If an Order is paid using the \"PayPal Wallet\", the statement descriptor will appear in following format on the payer\'s card statement: <code><var>PAYPAL_prefix</var>+(space)+<var>merchant_descriptor</var>+(space)+ <var>soft_descriptor</var></code><blockquote><strong>Note:</strong> The merchant descriptor is the descriptor of the merchantâ€™s payment receiving preferences which can be seen by logging into the merchant account https://www.sandbox.paypal.com/businessprofile/settings/info/edit</blockquote>The <code>PAYPAL</code> prefix uses 8 characters. Only the first 22 characters will be displayed in the statement. <br>For example, if:<ul><li>The PayPal prefix toggle is <code>PAYPAL *</code>.</li><li>The merchant descriptor in the profile is <code>Janes Gift</code>.</li><li>The soft descriptor is <code>800-123-1234</code>.</li></ul>Then, the statement descriptor on the card is <code>PAYPAL * Janes Gift 80</code>.
     * @type {string}
     * @memberof PurchaseUnitRequest
     */
    'soft_descriptor'?: string;
    /**
     * An array of items that the customer purchases from the merchant.
     * @type {Array<Item>}
     * @memberof PurchaseUnitRequest
     */
    'items'?: Array<Item>;
    /**
     * 
     * @type {ShippingDetail}
     * @memberof PurchaseUnitRequest
     */
    'shipping'?: ShippingDetail;
    /**
     * 
     * @type {SupplementaryData}
     * @memberof PurchaseUnitRequest
     */
    'supplementary_data'?: SupplementaryData;
}

